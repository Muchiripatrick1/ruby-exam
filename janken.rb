# Write the logic that lets the player (self) enter "0 ~ 2".
class Player
    def hand
      # Display a sentence that lets the player select a rock-paper-scissors hand.
      puts "Please enter a number."
      puts "0: Goo, 1: Choki, 2: Par"
      # Substitute the player's input value into the variable "input_hand".
      #Hint: Let's find out about the gets method.
      input_hand =gets.to_i
      # 「input_hand」If is either "0, 1, 2", the iterative process ends, and if it is not (including alphabets), the iterative process continues.
      while true
        # if 「input_hand」If is one of "0, 1, 2"
        # Tips：include?Let's find out about the method.
          # 「input_hand」Is returned as it is.
          # Hint: If you want to return a return value and end the iterative process「return」Use the.
        # else Otherwise
      else
          # Display a sentence that asks the player to enter "0-2".
          puts "please enter a number from 0 t0 2"
      input_hand=gets.to_i
          # puts "0〜2のPlease enter a number."
          # puts "0: Goo, 1: Choki, 2: Par"
          # variable「input_hand」Substitute the player's input value into.
        # end if statement end
      end
    end
  end
  # Write the logic that the other party randomly generates the value of "0 ~ 2".
  class Enemy
    def hand
    def enemy_hand
    random_number = rand (0..2)
    puts "The computer randomly picked #{random_number}"
    random_number
      # Randomly get the values ​​of Goo, Choki, Par。
    end
  end
  # Write the logic to play rock-paper-scissors with "0 ~ 2" entered by the player (yourself) and "0 ~ 2" randomly generated by the enemy, and output the result on the console.
  class Janken
    def pon(player_hand, enemy_hand)
      # Substitute ["goo", "choki", "par"] for the variable "janken".
      janken = ["Goo", "Choki", "Par"]
      #「The opponent's hand is # {other's hand}. Is output。
      puts "The opponent's hand is # {janken [enemy_hand]}."
      #Create logic to play rock-paper-scissors from the return value of the Player class and the return value of the Enemy class.
      if player_hand==enemy_hand
        # When the return value (player_hand) of the Player class and the return value (enemy_hand) of the Enemy class are the same
        # "Aiko" is output.
        puts"Aiko"
        # Returns "true" to run rock-paper-scissors repeatedly.
        #Tip:「return」You can use to return the return value. However, in Ruby, when returning a return value, it is common to omit "return".
      elsif #If the combination is as follows
        player_hand == 0 && enemy_hand == 1) || (player_hand == 1 && enemy_hand == 2) || (player_hand == 2 && enemy_hand == 0)
        puts "You win".
        #「false」Is returned to end the rock-paper-scissors game.
      else
        puts "You are losing".
        #「false」To end the rock-paper-scissors。
      end
    end
  end
  # Write the logic to execute the rock-paper-scissors game.
  class GameStart
    By using #self, you can call the jankenpon method using the class name without instantiating GameStart.
    def self.jankenpon
      #Substitute the instantiated Player for the variable "player".
      player = Player.new
      # Assign an instantiation of Enemy to the variable "enemy".
      enemy = Enemy.new
      # Assign an instantiation of Janken to the variable "janken".
      janken = Janken.new
      # Let's assign "true" to the variable "next_game".
      # 「next_game」But「false」If it is, the iterative process ends, and if it is "true", the iterative process is continued.
      while next_game
        # Substitute the value (return value) returned by executing rock-paper-scissors into the variable "next_game".
        #「janken.pon(player.hand, enemy.hand)」I'm running rock-paper-scissors.
        next_game = janken.pon(player.hand, enemy.hand)
      end
    end
  end
  # Call the jankenpon method with the class name.
  GameStart.jankenpon